#include <iostream>
#include <ctime>

using namespace std;

struct node
{
	int element;
	node* left;
	node* right;
	int height;
};

typedef struct node* nodeptr;


int max(int value1, int value2)
{
	return ((value1 > value2) ? value1 : value2);
}

int bsheight(nodeptr p)
{
	int t;
	if (p == NULL)
	{
		return -1;
	}
	else
	{
		t = p->height;
		return t;
	}
}

nodeptr srl(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->left;
	p1->left = p2->right; //p2 ritht пустоту присваивает
	p2->right = p1;
	p1->height = max(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max(bsheight(p2->left), p1->height) + 1;
	return p2;
}

nodeptr srr(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->right;
	p1->right = p2->left;
	p2->left = p1;
	p1->height = max(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max(p1->height, bsheight(p2->right)) + 1;
	return p2;
}
nodeptr drl(nodeptr& p1)
{
	p1->left = srr(p1->left);
	return srl(p1);
}
nodeptr drr(nodeptr& p1) //левоправый
{
	p1->right = srl(p1->right);
	return srr(p1);
}

int nonodes(nodeptr p)
{
	int count = 0;
	if (p != NULL)
	{
		nonodes(p->left);
		nonodes(p->right);
		count++;
	}
	return count;
}

void insert(int x, nodeptr& p)
{
	if (p == NULL)
	{
		p = new node;
		p->element = x;
		p->left = NULL;
		p->right = NULL;
		p->height = 0;
		if (p == NULL)
		{
			cout << "Out of Space\n" << endl;
		}
	}
	else
	{
		if (x < p->element)
		{
			insert(x, p->left);
			if ((bsheight(p->left) - bsheight(p->right)) == 2)
			{
				if (x < p->left->element)
				{
					p = srl(p);
				}
				else
				{
					p = drl(p);
				}
			}
		}
		else if (x > p->element)
		{
			insert(x, p->right);
			if ((bsheight(p->right) - bsheight(p->left)) == 2)
			{
				if (x > p->right->element)
				{
					p = srr(p);
				}
				else
				{
					p = drr(p);
				}
			}
		}
		else
		{
			cout << "Элемет существует\n" << endl;
		}
	}
	int m, n, d;
	m = bsheight(p->left);
	n = bsheight(p->right);
	d = max(m, n);
	p->height = d + 1;
}

void preorder(nodeptr p)
{
	if (p != NULL)
	{
		cout << p->element << "\t";
		preorder(p->left);
		preorder(p->right);
	}
}

// Inorder Printing
void inorder(nodeptr p)
{
	if (p != NULL)
	{
		inorder(p->left);
		cout << p->element << "\t";
		inorder(p->right);
	}
}

void print_Tree(nodeptr node, int level)
{
	if (node)
	{
		print_Tree(node->right, level + 1);
		for (int i = 0; i < level; i++) cout << "   ";
		cout << node->element << endl;
		print_Tree(node->left, level + 1);
	}
}

int main()
{
	setlocale(LC_ALL, "rus");
	nodeptr root, root1, min, max;//,flag;
	int a, choice, findele, delele;
	char ch = 'y';
	
	root = NULL;
	root1 = NULL;	
	do
	{
		cout << "[1]. Вставить новый узел.";							
		cout << "\n[2]. Показать содержимое дерева.";
		cout << "\n[0]. Выход";

		cout << "\nВыберите нужное действие: ";
		cin >> choice;

		switch (choice)
		{
		case 1:			
			cout << "Сколько элементов добавить? ";
			int key;
			cin >> key;
			for (int i = 0;i < key;i++)
			{
				cout << "Введите элемент: ";
				cin >> a;
				insert(a, root);
			}			
			cout << "\nНовые элементы добавлены успешно.\n" << endl;
			break;				
		case 2:			
			cout << "TДерево имеет высоту: " << bsheight(root) << endl;
			preorder(root);
			cout << "__________________________" << endl;
			cout << "Вывод в виде дерева: " << endl;
			print_Tree(root, a);			
			break;
		case 0:
			cout << "\nПрограмма закрыта.\n" << endl;
			break;
		default:
			cout << "Ошибка. Введите число из меню.\n" << endl;
			break;
		}
		system("pause");
		system("cls");
	} while (choice != 0);
	return 0;
}
