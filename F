#include <ctype.h>
#include <stdlib.h>
#include <iostream>
#include <conio.h>


using namespace std;

struct node
{
	int element;
	node* left;
	node* right;
	int height;
};

typedef struct node* nodeptr;

	void insert(int, nodeptr&);
	void del(int, nodeptr&);
	int deletemin(nodeptr&);
	void find(int, nodeptr&);
	nodeptr findmin(nodeptr);
	nodeptr findmax(nodeptr);
	void makeempty(nodeptr&);
	void copy(nodeptr&, nodeptr&);
	nodeptr nodecopy(nodeptr&);
	void preorder(nodeptr);
	void inorder(nodeptr);
	void postorder(nodeptr);
	int bsheight(nodeptr);	
	nodeptr srl(nodeptr&);
	nodeptr drl(nodeptr&);
	nodeptr srr(nodeptr&);
	nodeptr drr(nodeptr&);
	int max(int, int);
	int nonodes(nodeptr);

// Inserting a node
void insert(int x, nodeptr& p)
{
	if (p == NULL)
	{
		p = new node;
		p->element = x;
		p->left = NULL;
		p->right = NULL;
		p->height = 0;
		if (p == NULL)
		{
			cout << "Выход за предел.\n" << endl;
		}
	}
	else
	{
		if (x < p->element)
		{
			insert(x, p->left);
			if ((bsheight(p->left) - bsheight(p->right)) == 2)
			{
				if (x < p->left->element)
				{
					p = srl(p);
				}
				else
				{
					p = drl(p);
				}
			}
		}
		else if (x > p->element)
		{
			insert(x, p->right);
			if ((bsheight(p->right) - bsheight(p->left)) == 2)
			{
				if (x > p->right->element)
				{
					p = srr(p);
				}
				else
				{
					p = drr(p);
				}
			}
		}
		else
		{
			cout << "Элемент существует\n" << endl;
		}
	}
	int m, n, d;
	m = bsheight(p->left);
	n = bsheight(p->right);
	d = max(m, n);
	p->height = d + 1;
}
// Finding the Smallest
nodeptr findmin(nodeptr p)
{
	if (p == NULL)
	{
		cout << "В дереве нет элементов\n" << endl;
		return p;
	}
	else
	{
		while (p->left != NULL)
		{
			p = p->left;
			
		}
		return p;
	}
}
// Finding the Largest node
nodeptr findmax(nodeptr p)
{
	if (p == NULL)
	{
		cout << "В дереве нет элементов\n" << endl;
		return p;
	}
	else
	{
		while (p->right != NULL)
		{
			p = p->right;
			
		}
		return p;
	}
}
// Finding an element
void find(int x, nodeptr& p)
{
	if (p == NULL)
	{
		cout << "Простите, но такого элемента нет\n" << endl;
	}
	else
	{
		if (x < p->element)
		{
			find(x, p->left);
		}
		else
		{
			if (x > p->element)
			{
				find(x, p->right);
			}
			else
			{
				cout << "Элемент, который вы искали есть в дереве!\n" << endl;
			}
		}
	}
}
// Copy a tree
void copy(nodeptr& p, nodeptr& p1)
{
	makeempty(p1);
	p1 = nodecopy(p);
}
// Make a tree empty
void makeempty(nodeptr& p)
{
	nodeptr d;
	if (p != NULL)
	{
		makeempty(p->left);
		makeempty(p->right);
		d = p;
		free(d);
		p = NULL;
	}
}
// Copy the nodes
nodeptr nodecopy(nodeptr& p)
{
	nodeptr temp;
	if (p == NULL)
	{
		return p;
	}
	else
	{
		temp = new node;
		temp->element = p->element;
		temp->left = nodecopy(p->left);
		temp->right = nodecopy(p->right);
		return temp;
	}
}

// Deleting a node
void del(int x, nodeptr& p)
{
	nodeptr d;
	if (p == NULL)
	{
		cout << "Простите, но такого элемента нет\n" << endl;
	}
	else if (x < p->element)
	{
		del(x, p->left);
	}
	else if (x > p->element)
	{
		del(x, p->right);
	}
	else if ((p->left == NULL) && (p->right == NULL))
	{
		d = p;
		free(d);
		p = NULL;
		cout << "Элемент удален\n" << endl;
	}
	else if (p->left == NULL)
	{
		d = p;
		free(d);
		p = p->right;
		cout << "Элемент удален\n" << endl;
	}
	else if (p->right == NULL)
	{
		d = p;
		p = p->left;
		free(d);
		cout << "Элемент удален\n" << endl;
	}
	else
	{
		p->element = deletemin(p->right);
	}
}

int deletemin(nodeptr& p)
{
	int c;
	cout << "Выбрано удаление минимального значения\n" << endl;
	if (p->left == NULL)
	{
		c = p->element;
		p = p->right;
		return c;
	}
	else
	{
		c = deletemin(p->left);
		return c;
	}
}
void preorder(nodeptr p)
{
	if (p != NULL)
	{
		cout << p->element << "\t";
		preorder(p->left);
		preorder(p->right);
	}
}

// Inorder Printing
void inorder(nodeptr p)
{
	if (p != NULL)
	{
		inorder(p->left);
		cout << p->element << "\t";
		inorder(p->right);
	}
}

// PostOrder Printing
void postorder(nodeptr p)
{
	if (p != NULL)
	{
		postorder(p->left);
		postorder(p->right);
		cout << p->element << "\t";
	}
}

int max(int value1, int value2)
{
	return ((value1 > value2) ? value1 : value2);
}
int bsheight(nodeptr p)
{
	int t;
	if (p == NULL)
	{
		return -1;
	}
	else
	{
		t = p->height;
		return t;
	}
}

nodeptr srl(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->left;
	p1->left = p2->right;
	p2->right = p1;
	p1->height = max(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max(bsheight(p2->left), p1->height) + 1;
	return p2;
}
nodeptr srr(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->right;
	p1->right = p2->left;
	p2->left = p1;
	p1->height = max(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max(p1->height, bsheight(p2->right)) + 1;
	return p2;
}
nodeptr drl(nodeptr& p1)
{
	p1->left = srr(p1->left);
	return srl(p1);
}
nodeptr drr(nodeptr& p1)
{
	p1->right = srl(p1->right);
	return srr(p1);
}

int nonodes(nodeptr p)
{
	int count = 0;
	if (p != NULL)
	{
		nonodes(p->left);
		nonodes(p->right);
		count++;
	}
	return count;
}

void print_Tree(nodeptr node, int level)
{
	if (node)
	{
		print_Tree(node->left, level + 1);
		for (int i = 0; i < level; i++) cout << "   ";
		cout << node->element << endl;
		print_Tree(node->right, level + 1);
	}
}


int main()
{
	setlocale(LC_ALL, "rus");
	nodeptr root, root1, min, max;//,flag;
	int a, choice, findele, delele;
	char ch = 'y';
	

	root = NULL;
	root1 = NULL;	
	do
	{
		cout << "[1]. Вставить новый узел.";
		cout << "\n[2]. Найти минимальный элемент.";
		cout << "\n[3]. Найти максимальный элемент.";
		cout << "\n[4]. Поиск по значению.";
		cout << "\n[5]. Удалить элемент.";
		cout << "\n[6]. Вариант обхода 1.";
		cout << "\n[7]. Вариант обхода 2.";
		cout << "\n[8]. Вариант обхода 3.";
		cout << "\n[9]. Показать содержимое дерева.";
		cout << "\n[0]. Выход";

		cout << "\nВыберите нужное действие: ";
		cin >> choice;

		switch (choice)
		{
		case 1:			
			cout << "Сколько элементов добавить? ";
			int key;
			cin >> key;
			for (int i = 0;i < key;i++)
			{
				cout << "Введите элемент: ";
				cin >> a;
				insert(a, root);
			}			
			cout << "\nНовые элементы добавлены успешно.\n" << endl;
			break;
		case 2:
			if (root != NULL)
			{
				min = findmin(root);
				cout << "\nМинимальный элемент в дереве: " << min->element << endl;
			}
			break;
		case 3:
			if (root != NULL)
			{
				max = findmax(root);
				cout << "\nМаксимальный элемент в дереве: " << max->element << endl;
			}
			break;
		case 4:
			cout << "\nВведите элемент: ";
			cin >> findele;
			if (root != NULL)
			{
				find(findele, root);
			}
			break;
		case 5:
			cout << "\nКакое число удалить? : ";
			inorder(root);
			cin >> delele;
			del(delele, root);
			inorder(root);
			cout << endl;
			break;
		case 6:
			cout << "\nВариант обхода 1:" << endl;
			preorder(root);
			cout << endl;
			break;
		case 7:
			cout << "\nВариант обхода 2:" << endl;
			inorder(root);
			cout << endl;
			break;
		case 8:
			cout << "\nВарант обхода 3:" << endl;
			postorder(root);
			cout << endl;
			break;
		case 9:			
			cout << "TДерево имеет высоту: " << bsheight(root) << endl;
			preorder(root);
			cout << "__________________________" << endl;
			cout << "Вывод в виде дерева: " << endl;
			print_Tree(root, a);
			
			break;
		case 0:
			cout << "\nПрограмма закрыта.\n" << endl;
			break;
		default:
			cout << "Ошибка. Введите число из меню.\n" << endl;
			break;
		}
		system("pause");
		system("cls");
	} while (choice != 0);
	return 0;
}
